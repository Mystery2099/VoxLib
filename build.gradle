import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.20"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add any custom repositories here if needed
}

loom {
	mods {
		"voxlib" {
			sourceSet sourceSets.main
		}
	}

	// Configure the include configuration for embedding dependencies
	configurations {
		include
	}
}

dependencies {
	// Minecraft and Fabric dependencies
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Caffeine for high-performance caching
	implementation("com.github.ben-manes.caffeine:caffeine:${project.caffeine_version}") {
		exclude group: 'org.checkerframework', module: 'checker-qual'
		exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
	}

	// Include Caffeine in the final JAR
	include("com.github.ben-manes.caffeine:caffeine:${project.caffeine_version}") {
		exclude group: 'org.checkerframework', module: 'checker-qual'
		exclude group: 'com.google.errorprone', module: 'error_prone_annotations'
	}

	// Testing dependencies
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.2"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.10.2"
}

// Process resources and expand version in fabric.mod.json
processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// Set Java and Kotlin compilation targets
tasks.withType(JavaCompile).configureEach {
	it.options.release.set(17)
}

tasks.withType(KotlinCompile).configureEach {
	it.kotlinOptions.jvmTarget = 17
}

// Configure jar task
jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	// Include LICENSE file
	from("LICENSE") {
		rename { "${it}_${archives_base_name}"}
	}

	// Add manifest attributes
	manifest {
		attributes(
			'Implementation-Title': project.archives_base_name,
			'Implementation-Version': project.version,
			'Implementation-Vendor': 'Mystery2099',
			'Fabric-Loom-Version': '1.10.5'
		)
	}
}

// Java configuration
java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

// Configure test task
tasks.test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

// Maven publication configuration
publishing {
	publications {
		gpr(MavenPublication) {
			artifact remapJar
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		maven {
			def gitCreds = new Properties()
			def gitCredFile = new File("./gitlogin.properties")
			if (gitCredFile.exists()) {
				gitCreds.load(new FileInputStream(gitCredFile))
			}

			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/Mystery2099/VoxLib"

			credentials {
				username = gitCreds.username ?: System.getenv("USERNAME")
				password = gitCreds.token ?: System.getenv("GITHUB_TOKEN")
			}
		}
	}
}